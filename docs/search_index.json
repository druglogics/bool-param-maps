[
["index.html", "Balance Mutations in Logical Modeling Intro", " Balance Mutations in Logical Modeling John Zobolas Last updated: 28 August, 2020 Intro Several analyses/investigations relating to the balance logical operators paper. Loading libraries: library(xfun) library(knitr) library(dplyr) library(tidyr) library(tibble) library(corrplot) library(latex2exp) library(ggpubr) library(ggplot2) library(DT) library(usefun) library(emba) library(forcats) library(scales) "],
["bbr-function-analysis.html", "BBR Function Analysis Balance Boolean Regulatory Functions (BBRs) Truth Density Data Analysis", " BBR Function Analysis Balance Boolean Regulatory Functions (BBRs) BBR =&gt; Balance Boolean Regulatory Functions Let \\(f\\) be a boolean function \\(f(x,y):\\{0,1\\}^n \\rightarrow \\{0,1\\}\\), with \\(m\\) activators \\(x=\\{x_i\\}_{i=1}^{m}\\) and \\(k\\) inhibitors \\(y=\\{y_i\\}_{i=1}^{k}\\), that is a total of \\(n=m+k\\) regulators. A subset of BBRs have a non-DNF representation that puts the different category regulators in separate groups and a link boolean operator in between them. As such, for a link operator to make sense, we have that \\(m,k \\ge 1\\) (at least one regulator in each category). An example of such a function that has been used in the literature (Mendoza and Xenarios 2006) is the formula with the AND-NOT link operator: AND-NOT: \\[f(x,y) = \\left(\\bigvee_{i=1}^{m} x_i\\right) \\land \\lnot \\left(\\bigvee_{i=1}^{k} y_i\\right)\\] A variant of that one that shifts the balance in favor of the activators (as we will see the truth density significantly increases) is the function with the OR-NOT link operator: OR-NOT: \\[f(x,y) = \\left(\\bigvee_{i=1}^{m} x_i\\right) \\lor \\lnot \\left(\\bigvee_{i=1}^{k} y_i\\right)\\] Another one of this type of functions is the next one: BalanceOp1: \\[f(x,y) = \\bigvee_{\\forall (i,j)}^{m,k}(x_i\\land \\lnot y_j) = \\left(\\bigvee_{i=1}^{m} x_i\\right) \\land \\left(\\bigvee_{i=1}^{k} \\lnot y_i\\right)\\] Next, we introduce some threshold functions with pseudo-Boolean constraints: exp_act_win: \\[f_{act-win}(x,y)=\\begin{cases} 1, &amp; \\text{for } \\sum_{i=1}^{m} x_i \\ge \\sum_{i=1}^{k} y_i\\\\ 0, &amp; \\text{otherwise} \\end{cases}\\] exp_inh_win: \\[f_{inh-win}(x,y)=\\begin{cases} 1, &amp; \\text{for } \\sum_{i=1}^{m} x_i \\gt \\sum_{i=1}^{k} y_i\\\\ 0, &amp; \\text{otherwise} \\end{cases}\\] Note that: \\(f_{inh-win}(x,y) = \\lnot f_{act-win}(y,x)\\). I searched for an analytical formula for the two last functions (they get pretty big!). More info and discussion about these 2 last formulas, see the math.stackexchange question. Truth Density Data Analysis Data Truth Density (TD) of a boolean equation/expression, given it’s equivalent truth table, is the number of rows that the expression is active divided to the total number of rows \\((2^n)\\). I created every possible truth table for up to \\(20\\) variables (variables here means regulators for us) and calculated the AND-NOT, OR-NOT, BalanceOp1, exp_act_win, exp_inh_win results for every possible configuration of the number of activators and inhibitors that added up to the number of regulators. Then, from the truth tables I calculated the truth density of each operator in each particular configuration. See part of the data below: stats = readRDS(file = &quot;data/stats.rds&quot;) DT::datatable(data = stats, caption = htmltools::tags$caption(&quot;Truth Density Data&quot;, style=&quot;color:#dd4814; font-size: 18px&quot;), options = list(pageLength = 6, scrollX = TRUE, order = list(list(1, &quot;asc&quot;)))) %&gt;% formatRound(4:8, digits = 2) Use the get_stats.R script to reproduce this data. Truth Density formulas Also, I have proved the exact formulas for the truth densities in the case of the AND-NOT and OR-NOT link operators (see here for a proof sketch). I write them here explicitly, as well as their long-term behaviour (for large \\(n\\). number of regulators): AND-NOT: \\[TD_{AND-NOT}=\\frac{2^m-1}{2^n} \\xrightarrow{n \\text{ large}} \\frac{1}{2^k}\\] OR-NOT: \\[TD_{OR-NOT}=\\frac{2^n-2^k}{2^n} \\xrightarrow{n \\text{ large}} 1-\\frac{1}{2^m}\\] For large \\(n\\), the \\(TD_{AND-NOT}\\) depends only on the number of inhibitors while the \\(TD_{OR-NOT}\\) depends only on the number of activators. Also, again for large \\(n\\), the extreme case of having a TD value equal to \\(0.5\\) is a result of having only one of the regulators being an inhibitor (activator) of the AND-NOT (OR-NOT) equation. We can use the data above to validate the formulas from the proof (up to \\(n=20\\)): # Validate AND-NOT Truth Density formula formula_td_and_not = stats %&gt;% mutate(formula_td_and_not = (2^num_act - 1)/(2^num_reg)) %&gt;% pull(formula_td_and_not) all(stats %&gt;% pull(td_and_not) == formula_td_and_not) [1] TRUE # Validate OR-NOT Truth Density formula formula_td_or_not = stats %&gt;% mutate(formula_td_or_not = (((2^num_act - 1) * (2^num_inh)) + 1)/(2^num_reg)) %&gt;% pull(formula_td_or_not) all(stats %&gt;% pull(td_or_not) == formula_td_or_not) [1] TRUE AND-NOT vs OR-NOT TD Comparing the AND-NOT and OR-NOT truth densities across the number of regulators: # tidy up data stats_and_or = pivot_longer(data = stats, cols = c(td_and_not, td_or_not), names_to = &quot;lo&quot;, values_to = &quot;td&quot;) %&gt;% select(num_reg, lo, td) %&gt;% mutate(lo = replace(x = lo, list = lo == &quot;td_and_not&quot;, values = &quot;AND-NOT&quot;)) %&gt;% mutate(lo = replace(x = lo, list = lo == &quot;td_or_not&quot;, values = &quot;OR-NOT&quot;)) %&gt;% rename(`Link Operator` = lo) ggboxplot(data = stats_and_or, x = &quot;num_reg&quot;, y = &quot;td&quot;, color = &quot;Link Operator&quot;, palette = &quot;Set1&quot;, title = &quot;AND-NOT vs OR-NOT Truth Densities&quot;, xlab = &quot;Number of regulators&quot;, ylab = &quot;Truth Density&quot;) + theme(plot.title = element_text(hjust = 0.5)) Figure 1: AND-NOT vs OR-NOT Truth Densities across all possible activators and inhibitors combinations up to 20 regulators The more regulators there are, the more likely it is that the AND-NOT link operator in the boolean equation will result in an inhibited target and that the OR-NOT link operator in an active target. For \\(n&gt;6\\), the points outside the boxplots (with a truth density of \\(\\frac{1}{2}, \\frac{1}{4}, 1-\\frac{1}{4},\\frac{1}{8},1-\\frac{1}{8},...\\)) correspond to the long-term behaviour of the truth density formulas shown above, but where there is also large imbalance between the number of activators and inhibitors. We can also check the relation between TD and number of activators and inhibitors in each case. The following two figures show us why the number of inhibitors are more decisive in the AND-NOT case: ggscatter(data = stats %&gt;% rename(`#Regulators` = num_reg), x = &quot;num_inh&quot;, y = &quot;td_and_not&quot;, color = &quot;#Regulators&quot;, ylab = &quot;Truth Density&quot;, xlab = &quot;Number of Inhibitors&quot;, title = &quot;AND-NOT TD vs Number of Inhibitors&quot;) + theme(plot.title = element_text(hjust = 0.5)) ggscatter(data = stats %&gt;% rename(`#Regulators` = num_reg), x = &quot;num_act&quot;, y = &quot;td_and_not&quot;, color = &quot;#Regulators&quot;, ylab = &quot;Truth Density&quot;, xlab = &quot;Number of Activators&quot;, title = &quot;AND-NOT TD vs Number of Activators&quot;) + theme(plot.title = element_text(hjust = 0.5)) Figure 2: AND-NOT TD vs Number of Activators and Inhibitors In the OR-NOT case the number of activators is more important: ggscatter(data = stats %&gt;% rename(`#Regulators` = num_reg), x = &quot;num_inh&quot;, y = &quot;td_or_not&quot;, color = &quot;#Regulators&quot;, ylab = &quot;Truth Density&quot;, xlab = &quot;Number of Inhibitors&quot;, title = &quot;OR-NOT TD vs Number of Inhibitors&quot;) + theme(plot.title = element_text(hjust = 0.5)) ggscatter(data = stats %&gt;% rename(`#Regulators` = num_reg), x = &quot;num_act&quot;, y = &quot;td_or_not&quot;, color = &quot;#Regulators&quot;, ylab = &quot;Truth Density&quot;, xlab = &quot;Number of Activators&quot;, title = &quot;OR-NOT TD vs Number of Activators&quot;) + theme(plot.title = element_text(hjust = 0.5)) Figure 3: OR-NOT TD vs Number of Activators and Inhibitors BalanceOp1 TD If we add the BalanceOp1 formuls’s TD results to the first plot we have: # tidy up data stats_and_or_balance = pivot_longer(data = stats, cols = c(td_and_not, td_or_not, td_balance_op), names_to = &quot;lo&quot;, values_to = &quot;td&quot;) %&gt;% select(num_reg, lo, td) %&gt;% mutate(lo = replace(x = lo, list = lo == &quot;td_and_not&quot;, values = &quot;AND-NOT&quot;)) %&gt;% mutate(lo = replace(x = lo, list = lo == &quot;td_or_not&quot;, values = &quot;OR-NOT&quot;)) %&gt;% mutate(lo = replace(x = lo, list = lo == &quot;td_balance_op&quot;, values = &quot;BalanceOp1&quot;)) %&gt;% rename(`Link Operator` = lo) ggboxplot(data = stats_and_or_balance, x = &quot;num_reg&quot;, y = &quot;td&quot;, color = &quot;Link Operator&quot;, palette = &quot;Set1&quot;, title = &quot;AND-NOT vs OR-NOT vs BalanceOp1 Truth Densities&quot;, xlab = &quot;Number of regulators&quot;, ylab = &quot;Truth Density&quot;) + theme(plot.title = element_text(hjust = 0.5)) Figure 4: AND-NOT vs OR-NOT vs BalanceOp1 Truth Densities across all possible activators and inhibitors combinations up to 20 regulators The BalanceOp1 TD values are closer to the TD values of the OR-NOT formula compared to the AND-NOT one. The BalanceOp1 is less biased compared to the OR-NOT link operator, but still for large \\(n\\) (regulators) it practically makes the target activated. As we can see in the following two figures, the BalanceOp1 shows a more balanced dependency between the number of activators and inhibitors: ggscatter(data = stats %&gt;% rename(`#Regulators` = num_reg), x = &quot;num_inh&quot;, y = &quot;td_balance_op&quot;, color = &quot;#Regulators&quot;, ylab = &quot;Truth Density&quot;, xlab = &quot;Number of Inhibitors&quot;, title = &quot;BalanceOp1 TD vs Number of Inhibitors&quot;) + theme(plot.title = element_text(hjust = 0.5)) ggscatter(data = stats %&gt;% rename(`#Regulators` = num_reg), x = &quot;num_act&quot;, y = &quot;td_balance_op&quot;, color = &quot;#Regulators&quot;, ylab = &quot;Truth Density&quot;, xlab = &quot;Number of Activators&quot;, title = &quot;BalanceOp1 TD vs Number of Activators&quot;) + theme(plot.title = element_text(hjust = 0.5)) Figure 5: BalanceOp1 TD vs Number of Activators and Inhibitors Threshold Functions TD In contrast, if we check the truth density of the \\(f_{act-win}(x,y)\\) and \\(f_{inh-win}(x,y)\\) boolean functions we have: # tidy up data stats_functions = pivot_longer(data = stats, cols = c(td_exp_act, td_exp_inh), names_to = &quot;fun&quot;, values_to = &quot;td&quot;) %&gt;% select(num_reg, fun, td) %&gt;% mutate(fun = replace(x = fun, list = fun == &quot;td_exp_act&quot;, values = &quot;Activators Win&quot;)) %&gt;% mutate(fun = replace(x = fun, list = fun == &quot;td_exp_inh&quot;, values = &quot;Inhibitors Win&quot;)) %&gt;% rename(`Equation Formula` = fun) ggboxplot(data = stats_functions, x = &quot;num_reg&quot;, y = &quot;td&quot;, color = &quot;Equation Formula&quot;, palette = &quot;lancet&quot;, title = TeX(&quot;Truth Densities of $f_{act-win}(x,y)$ and $f_{inh-win}(x,y)$&quot;), xlab = &quot;Number of regulators&quot;, ylab = &quot;Truth Density&quot;) + theme(plot.title = element_text(hjust = 0.5)) Figure 6: Truth Desities of two robust boolean formulas across all possible activators and inhibitors combinations up to 20 regulators Both boolean functions have a large variance of truth densities irrespective of the number of regulators. The median values seem to converge to \\(0.5\\) for both formulas. The median value of truth density for the \\(f_{act-win}(x,y)\\) is always larger than the \\(f_{inh-win}(x,y)\\) (as expected). TD Data Distance We check how close are the truth density values of the different proposed BBRs, also compared to the proportion of activators, e.g. if a BBR has 1 activator and 5 inhibitors (resp. 5 activators and 1 inhibitor) I would expect my regulatory function’s output to be statistically more inhibited (resp. activated). We find the euclidean distance between the different truth density values and show them in a table and dendrogram format: act_prop = stats %&gt;% mutate(act_prop = num_act/num_reg) %&gt;% pull(act_prop) td_and_not = stats %&gt;% pull(td_and_not) td_or_not = stats %&gt;% pull(td_or_not) td_balance_op = stats %&gt;% pull(td_balance_op) td_exp_act = stats %&gt;% pull(td_exp_act) td_exp_inh = stats %&gt;% pull(td_exp_inh) d = dist(rbind(act_prop, td_and_not, td_or_not, td_balance_op, td_exp_act, td_exp_inh)) # color `act_prop` column breaks = quantile(unname(as.matrix(d)[, &quot;act_prop&quot;]), probs = seq(.05, .95, .05), na.rm = TRUE) col = round(seq(255, 40, length.out = length(breaks) + 1), 0) %&gt;% {paste0(&quot;rgb(255,&quot;, ., &quot;,&quot;, ., &quot;)&quot;)} # red caption.title = &quot;Euclidean Distances between vectors of truth density values (Symmetric)&quot; DT::datatable(data = d %&gt;% as.matrix(), options = list(dom = &quot;t&quot;, scrollX = TRUE), caption = htmltools::tags$caption(caption.title, style=&quot;color:#dd4814; font-size: 18px&quot;)) %&gt;% formatRound(1:6, digits = 3) %&gt;% formatStyle(columns = c(&quot;act_prop&quot;), backgroundColor = styleInterval(breaks, col)) plot(hclust(dist(d)), main = &quot;Distance Dendogram of Thruth Densities&quot;, ylab = &quot;Euclidean Distance&quot;, sub = &quot;BBR Truth Densities&quot;, xlab = &quot;&quot;) The threshold functions have truth densities values that are closer to the proportion of activators for a varying number of regulators, compared to the AND-NOT and OR-NOT formulas. As such they represent more realistic candidates for regulatory functions from a statistical point of view. The TD values of OR-NOT and BalanceOp1 are in general very close (as we’ve also seen in previous Figure) Correlation We will now check the correlation between each pair of operators/proposed functions, as well as the number of regulators, inhibitors and activators: M = cor(stats, method = &quot;kendall&quot;) res = cor.mtest(stats, method = &quot;kendall&quot;) corrplot(corr = M, type = &quot;upper&quot;, p.mat = res$p, sig.level = c(.001, .01, .05), pch.cex = 1, pch.col = &quot;white&quot;, insig = &quot;label_sig&quot;, tl.col = &quot;black&quot;, tl.srt = 45) Figure 7: Correlation Matrix of Truth Densities and number of regulators The two functions results \\(f_{act-win}(x,y), f_{inh-win}(x,y)\\) are highly correlated as expected Lower AND-NOT TD values highly correlate with higher number of inhibitors Higher OR-NOT TD values highly correlate with higher number of activators "],
["cascade-1-0-analysis.html", "CASCADE 1.0 Analysis Scale-free Properties Model Stable State Statistics Stable States Data Parameterization and Stable State Agreement", " CASCADE 1.0 Analysis Scale-free Properties In this section we demonstrate the scale-free properties of the CASCADE 1.0 network. We show that both in- and out-degree distributions are asymptotically power-law. Use the script get_distribution_stats.R to generate the degree distribution stats. We load the results: dd_stats = readRDS(file = &quot;data/dd_stats.rds&quot;) dd_stats %&gt;% group_by(in_degree) %&gt;% tally() %&gt;% ggplot(aes(x = in_degree, y = n)) + geom_bar(stat = &quot;identity&quot;, fill = &quot;steelblue&quot;, width = 0.7) + geom_smooth(aes(color = &quot;red&quot;), se = FALSE, show.legend = FALSE) + theme_classic() + labs(title = &quot;In-Degree Distribution (CASCADE 1.0)&quot;, x = &quot;In Degree&quot;, y = &quot;Number of Nodes&quot;) Figure 8: In Degree Distribution (CASCADE 1.0) dd_stats %&gt;% group_by(out_degree) %&gt;% tally() %&gt;% ggplot(aes(x = out_degree, y = n)) + geom_bar(stat = &quot;identity&quot;, fill = &quot;steelblue&quot;) + geom_smooth(aes(color = &quot;red&quot;), se = FALSE, span = 0.58, show.legend = FALSE) + theme_classic() + labs(title = &quot;Out-Degree Distribution (CASCADE 1.0)&quot;, x = &quot;Out Degree&quot;, y = &quot;Number of Nodes&quot;) Figure 9: Out Degree Distribution (CASCADE 1.0) Model Stable State Statistics Using abmlog we generated all \\(2^{23} = 8388608\\) possible link operator mutated models for the CASCADE 1.0 topology. The models are stored in both .gitsbe and .bnet files in the Zenodo dataset [TOADD]. The gitsbe files include also the fixpoint attractors. Thus we can find the frequency distribution of the number of fixpoints across all produced models (use the script count_model_ss.R). The model stable state (fixpoint) statistics are as follows: models_ss_stats = readRDS(file = &quot;data/models_ss_stats.rds&quot;) models_ss_stats %&gt;% group_by(ss_num) %&gt;% tally() %&gt;% ggplot(aes(x = ss_num, y = n, fill = as.factor(ss_num))) + geom_bar(stat = &quot;identity&quot;, show.legend = FALSE) + geom_text(aes(label = n), vjust = -0.5) + geom_text(aes(label = paste0(100 * round(n/nrow(models_ss_stats), digits = 2), &quot;%&quot;)), size = 10, vjust = c(2.5, 2.5, -2)) + theme_classic2() + theme(plot.title = element_text(hjust = 0.5)) + labs(title = &quot;Stable States Distribution&quot;, x = &quot;Number of Stable States&quot;, y = &quot;Number of models&quot;) Figure 10: Stable States Distribution across all link-operator parameterized models (CASCADE 1.0) Stable States Data To load the stable state data for the models that have 1 stable state use the Zenodo dataset (TODO) and the script tidy_ss_data.R Parameterization and Stable State Agreement We calculate the node_stats tibble object using the get_node_stats.R script. This object includes the agreement statistics information for each node that has a link operator (i.e. it is targeted by both activators and inhibitors). Only the models that had 1 stable state are considered in this analysis section. Load the node_stats: node_stats = readRDS(file = &quot;data/node_stats.rds&quot;) We are interested in two variables of interest: Parameterization of a link operator node: AND-NOT (0) vs OR-NOT (1) Stable State of a node: inhibited (0) vs active (1) There exist are 4 different possibilities related to 2 cases: 0-0, 1-1 =&gt; parameterization and stable state match (e.g. node was parameterized with AND-NOT and it’s state was inhibited or it had OR-NOT and its state was active) 1-0, 0-1 =&gt; parameterization and stable state differ (e.g. node had OR-NOT and its state was inhibited, or AND-NOT and it’s state was active) In the next Figure we show the total observed proportionate agreement for each node, which is the number of models for which parameterization and stable state matched (case 1 above) divided by the total amount of models: node_stats %&gt;% mutate(node = forcats::fct_reorder(node, desc(num_reg))) %&gt;% ggplot(aes(x = node, y = obs_prop_agreement, fill = as.factor(num_reg))) + geom_bar(stat = &quot;identity&quot;) + scale_y_continuous(labels=scales::percent) + labs(title = &quot;Agreement between Link Operator Parameterization and Stable State Activity&quot;, x = &quot;Target Nodes with both activating and inhibiting regulators&quot;, y = &quot;Observed Proportionate Agreement&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90)) + scale_fill_brewer(guide = guide_legend(reverse=TRUE, title = &quot;#Regulators&quot;), palette = &quot;Set1&quot;) Figure 11: Parameterization and Stable State activity agreement The total barplot area covered (i.e. the total agreement score so to speak) is 77.7294779%. The above score means that the is a higher probability than chance to assign a node the AND-NOT (resp. OR-NOT) link operator in its respective boolean equation and that node at the same time having an inhibited (resp. activated) stable state of 0 (.resp 1) in any CASCADE 1.0 link operator parameterized model. This suggests that the corresponding boolean formula used is biased and the previous analysis in this report showed that for larger networks this behaviour will become statistically more prevalent. As such, even though the number of regulators are less than 6, we find that there is strong agreement between link operator and stable state activity across all the nodes that have both types of regulators (activators and inhibitors). This agreement can be seen stronger for some nodes than others. Next, we calculate per node, the proportion of link operator assignments that retained their expected (i.e. keeping the same digit) stable state activity (e.g. the proportion of models corresponding to the cases 0-0/(0-0 + 0-1) for the AND-NOT link operator - similar for OR-NOT): node_stats %&gt;% mutate(and_not_0ss_prop = and_not_0ss_agreement/(and_not_0ss_agreement + and_not_1ss_disagreement)) %&gt;% mutate(or_not_1ss_prop = or_not_1ss_agreement/(or_not_1ss_agreement + or_not_0ss_disagreement)) %&gt;% select(node, num_reg, and_not_0ss_prop, or_not_1ss_prop, active_prop) %&gt;% rename(`AND-NOT` = and_not_0ss_prop, `OR-NOT` = or_not_1ss_prop) %&gt;% mutate(node = forcats::fct_reorder(node, desc(num_reg))) %&gt;% pivot_longer(cols = c(`AND-NOT`, `OR-NOT`)) %&gt;% ggplot(aes(x = node, y = value, fill = name)) + geom_bar(position = &quot;dodge&quot;, stat = &quot;identity&quot;) + scale_y_continuous(labels=scales::percent) + labs(title = &quot;Link Operator Parameterization Agreement with Stable State Activity&quot;, x = &quot;Target Nodes with both activating and inhibiting regulators&quot;, y = &quot;Observed Proportionate Agreement&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90)) + scale_fill_brewer(guide = guide_legend(title = &quot;Link Operator&quot;), palette = &quot;Set1&quot;) + geom_line(aes(y = active_prop, color = active_prop), group = 1, size = 1.2) + scale_color_gradient(labels=scales::percent, low=&quot;grey&quot;, high=&quot;green&quot;, name = &quot;%Models:active node&quot;, limits = c(0,1)) + theme(legend.title = element_text(size = 10)) Figure 12: Parameterization and Stable State activity agreement 2 Higher proportional activity for a node correlates with higher OR-NOT-activated state agreement. LRP_f has 4 activators and 1 inhibitor and from the previous statistical analysis with found that \\(TD_{AND-NOT,4+1}=0.469\\), \\(TD_{OR-NOT,4+1}=0.969\\), numbers which correspond really well with the proportionate agreement scores found across all the CASCADE 1.0 models. TSC_f has 1 activator and 4 inhibitors (which corresponds well to it’s total inhibition profile in all the models). TSC_f and mTORC2_c are always found inhibited and thus the agreement with the AND-NOT-inhibited state is perfect and the OR-NOT-activated state agreement zero. In the above Figure, wherever there is less than 0.5 disagreement, we can always explain it with the activity proportion value and the number of activators being more (or less resp.) than the number of inhibitors - see following table: caption.title = &quot;Link Operator Statistics&quot; DT::datatable(data = node_stats %&gt;% select(node, num_reg, num_act, num_inh), caption = htmltools::tags$caption(caption.title, style=&quot;color:#dd4814; font-size: 18px&quot;), options = list(order = list(list(2, &quot;desc&quot;)))) %&gt;% formatRound(5:6, digits = 3) "],
["r-session-info.html", "R session info", " R session info xfun::session_info() R version 3.6.3 (2020-02-29) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 18.04.5 LTS Locale: LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C Package version: abind_1.4-5 assertthat_0.2.1 backports_1.1.8 base64enc_0.1.3 BH_1.72.0.3 bibtex_0.4.2.2 bookdown_0.20 boot_1.3.25 broom_0.5.6 callr_3.4.3 car_3.0-8 carData_3.0-4 cellranger_1.1.0 Ckmeans.1d.dp_4.3.2 cli_2.0.2 clipr_0.7.0 codetools_0.2-16 colorspace_1.4-1 compiler_3.6.3 corrplot_0.84 cowplot_1.0.0 crayon_1.3.4 crosstalk_1.1.0.1 curl_4.3 data.table_1.12.8 desc_1.2.0 digest_0.6.25 dplyr_1.0.0 DT_0.14 ellipsis_0.3.1 emba_0.1.7 evaluate_0.14 fansi_0.4.1 farver_2.0.3 forcats_0.5.0 foreign_0.8-75 gbRd_0.4-11 generics_0.0.2 ggplot2_3.3.2 ggpubr_0.4.0 ggrepel_0.8.2 ggsci_2.9 ggsignif_0.6.0 glue_1.4.1 graphics_3.6.3 grDevices_3.6.3 grid_3.6.3 gridExtra_2.3 gtable_0.3.0 haven_2.3.1 highr_0.8 hms_0.5.3 htmltools_0.5.0 htmlwidgets_1.5.1 igraph_1.2.5 isoband_0.2.2 jsonlite_1.7.0 knitr_1.29 labeling_0.3 later_1.1.0.1 latex2exp_0.4.0 lattice_0.20-41 lazyeval_0.2.2 lifecycle_0.2.0 lme4_1.1.23 magrittr_1.5 maptools_1.0.1 markdown_1.1 MASS_7.3.51.6 Matrix_1.2.18 MatrixModels_0.4.1 methods_3.6.3 mgcv_1.8.31 mime_0.9 minqa_1.2.4 munsell_0.5.0 nlme_3.1-148 nloptr_1.2.2.1 nnet_7.3.14 openxlsx_4.1.5 parallel_3.6.3 pbkrtest_0.4.8.6 pillar_1.4.4 pkgbuild_1.0.8 pkgconfig_2.0.3 pkgload_1.1.0 plyr_1.8.6 polynom_1.4.0 praise_1.0.0 prettyunits_1.1.1 processx_3.4.2 progress_1.2.2 promises_1.1.1 ps_1.3.3 purrr_0.3.4 quantreg_5.55 R6_2.4.1 RColorBrewer_1.1.2 Rcpp_1.0.4.6 RcppEigen_0.3.3.7.0 Rdpack_1.0.0 readr_1.3.1 readxl_1.3.1 rematch_1.0.1 reshape2_1.4.4 rio_0.5.16 rje_1.10.16 rlang_0.4.6 rmarkdown_2.3 rprojroot_1.3.2 rstatix_0.6.0 rstudioapi_0.11 scales_1.1.1 sp_1.4.2 SparseM_1.78 splines_3.6.3 statmod_1.4.34 stats_3.6.3 stringi_1.4.6 stringr_1.4.0 testthat_2.3.2 tibble_3.0.1 tidyr_1.1.0 tidyselect_1.1.0 tinytex_0.24 tools_3.6.3 usefun_0.4.8 utf8_1.1.4 utils_3.6.3 vctrs_0.3.1 viridisLite_0.3.0 visNetwork_2.0.9 withr_2.2.0 xfun_0.15 yaml_2.2.1 zip_2.0.4 "],
["references.html", "References", " References Mendoza, Luis, and Ioannis Xenarios. 2006. “A method for the generation of standardized qualitative dynamical systems of regulatory networks.” Theoretical Biology and Medical Modelling 3 (1): 13. https://doi.org/10.1186/1742-4682-3-13. "]
]
